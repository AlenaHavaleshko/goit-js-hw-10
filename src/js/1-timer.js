
import '../css/styles.css';

// setTimeout
// const logger = time => {
//   console.log(`–õ–æ–≥ —á–µ—Ä–µ–∑ ${time} –º—Å, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –æ—Ç–µ–Ω–∏–ª–∏ —Ç–∞–π–º –∞—É—Ç`)
// };

// const timerId = setTimeout(logger, 2000, 2000);

// console.log(timerId);

// const shouldCanselTimer = Math.random() > 0.3;
// console.log(shouldCanselTimer);

// if(shouldCanselTimer) {
//   clearTimeout(timerId);
// }

// // setInterval
// const logger = time => {
//   console.log(`–õ–æ–≥ –∫–∞–∂–¥—ã–µ ${time} –º—Å - ${Date.now()}`)
// };

// const intervalId = setInterval(logger, 2000, 2000);

// console.log(intervalId);

// const shouldCanselInterval = Math.random() > 0.3;
// console.log(shouldCanselInterval);

// if(shouldCanselInterval) {
//   clearInterval(intervalId);
// }

//------------------------------------------
// const date1 = new Date();
// console.log('date1', date1);


// setTimeout(() => {
//   const date2 = new Date();

//   console.log('date1', date1);
//   console.log('date2', date2);

//   console.log(date2 - date1)
// }, 3000);

//------------------------------------------

const refs = {
  startBtn: document.querySelector('button[data-action-start]'),
  stopBtn: document.querySelector('button[data-action-stop]'),
  clockface: document.querySelector('.js-clockface'),
}

class Timer {
  constructor({onTick}) {
    this.intervalId = null;
    this.isActive = false;
    this.onTick = onTick;
  }
  start() {
    if(this.isActive) {
      return;
    }
    const startTime = Date.now();
    this.isActive = true;

    this.intervalId = setInterval(() => {
      const currentTime = Date.now();
      const deltaTime = currentTime - startTime;
      const time = getTimeComponents(deltaTime);
  
     this.onTick(time);
    }, 1000);
  }

  stop() {
    clearInterval(this.intervalId);
    this.isActive = false;
  }
}


// timer

const timer = new Timer({
  onTick: updateClockface,
});
// const timer = {
//   intervalId: null,
//   isActive: false,
//   start() {
//     if(this.isActive) {
//       return;
//     }
//     const startTime = Date.now();
//     this.isActive = true;

//     this.intervalId = setInterval(() => {
//       const currentTime = Date.now();
//       const deltaTime = currentTime - startTime;
//       const time = getTimeComponents(deltaTime);
  
//       updateClockface(time);
//      // console.log(`${hours}::${mins}::${secs}`);
//     }, 1000);
//   },
//   stop() {
//     clearInterval(this.intervalId);
//     this.isActive = false;
//   },
// };

// –∑–∞–ø—É—Å–∫
refs.startBtn.addEventListener('click', timer.start.bind(timer));

// —Å—Ç–æ–ø
refs.stopBtn.addEventListener('click', timer.stop.bind(timer));



// –ü—Ä–∏–π–º–∞—é—Ç—å —á–∞—Å —É –º—ñ–¥—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
// –†–∞—Ö—É—é—Ç—å —Å–∫—ñ–ª—å–∫–∏ –≤ –Ω–∏—Ö –≤–º—ñ—â–∞—î—Ç—å—Å—è –≥–æ–¥–∏–Ω/—Ö–≤–∏–ª–∏–Ω/—Å–µ–∫—É–Ω–¥
// –ú–∞–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å

function updateClockface({ hours, mins, secs }) {
  refs.clockface.textContent = `${hours}:${mins}:${secs}`;
}

// –ü—Ä–∏–π–º–∞—ç —á–∏—Å–ª–∞, –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤ —Å—Ç—Ä–æ–∫—É —ñ –¥–æ–¥–∞—î –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ 0
//  —è–∫—â–æ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2—Ö –∑–Ω–∞–∫–æ–≤ 
function pad(value) {
  return String(value).padStart(2, '0');
}

// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
// –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs
// –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ —Å—Ç–µ–∫–∞ üí©

function getTimeComponents(time) {
  const hours = pad(
    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
  );
  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));

  return { hours, mins, secs };
}






